<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd"
	default-lazy-init="true">

	<description>Spring-abc</description>

	<context:component-scan base-package="xyz.springabc">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<bean id="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:application.properties</value>
			</list>
		</property>
	</bean>

	<bean id="hibernateJpaVendorAdapter"
		class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="generateDdl" value="${jpa.generateDdl}" />
		<property name="database" value="${jpa.database}" />
		<property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect" />
		<property name="showSql" value="${jpa.showSql}" />
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="true" />
			<tx:method name="add*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="true" />
			<tx:method name="remove*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<cache:annotation-driven cache-manager ="cacheManager" />
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
		p:cache-manager-ref="ehcache" />
	<bean id="ehcache"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
		p:config-location="classpath:${ehcache.configFile}" p:shared="true"/>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan" value="xyz.springabc.domin" />
		<property name="jpaDialect">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop> 
				<prop key="net.sf.ehcache.configurationResourceName">${hibernate.ehcache.configFile}</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.search.default.directory_provider">filesystem</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">none</prop>
			</props>
		</property>
	</bean>

	<!-- 数据源配置,使用应用内的druid数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${jdbc.pool.minIdle}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		<property name="maxWait" value="${jdbc.pool.maxActive}" />
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.pool.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${jdbc.pool.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="${jdbc.pool.testWhileIdle}" />
		<property name="testOnBorrow" value="${jdbc.pool.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.pool.testOnReturn}" />
		<property name="filters" value="${jdbc.pool.filters}" />
	</bean>

	<jpa:repositories base-package="xyz.springabc.repository"
		transaction-manager-ref="transactionManager"
		entity-manager-factory-ref="entityManagerFactory" />

	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	<aop:aspectj-autoproxy />

	<!-- 邮件发送器 -->
	<bean id="myMailSender" class="xyz.springabc.web.helper.MyMailSender">
		<constructor-arg index="0">
			<value>${email.host}</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>${email.port}</value>
		</constructor-arg>
		<constructor-arg index="2">
			<value>${email.username}</value>
		</constructor-arg>
		<constructor-arg index="3">
			<value>${email.password}</value>
		</constructor-arg>
	</bean>
	<!-- qiniu -->
	<bean id="uploadManager" class="com.qiniu.storage.UploadManager"></bean>
	<bean id="qiniu" class="xyz.springabc.web.helper.Qiniu">
		<constructor-arg index="0">
			<value>${qiniu.accessKey}</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>${qiniu.secretKey}</value>
		</constructor-arg>
		<constructor-arg index="2">
			<value>${qiniu.space}</value>
		</constructor-arg>
		<constructor-arg index="3">
			<value>${qiniu.domain}</value>
		</constructor-arg>
		<property name="uploadManager">
			<ref bean="uploadManager" />
		</property>
	</bean>
</beans>